require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '13.0'
install! 'cocoapods', :deterministic_uuids => false

inhibit_all_warnings!

use_frameworks! :linkage => :static

target 'greenTravel' do
  pod 'Firebase/AnalyticsWithoutAdIdSupport'
  # add pods for any other desired Firebase products
  # https://firebase.google.com/docs/ios/setup#available-pods
  pod 'Firebase/Crashlytics'
  pod 'Firebase/Performance'
  pod 'Amplitude', '~> 8.2.0'
  
  pod 'Amplify'
  pod 'AmplifyPlugins/AWSCognitoAuthPlugin'

  pod 'SwiftLint'
  
  permissions_path = '../node_modules/react-native-permissions/ios'
  pod 'Permission-LocationAlways', :path => "#{permissions_path}/LocationAlways"
  pod 'Permission-LocationWhenInUse', :path => "#{permissions_path}/LocationWhenInUse"
  $ReactNativeMapboxGLIOSVersion = '~> 6.3'
  use_expo_modules!
  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
      rescue => e
      Pod::UI.warn e
    end
  end
    config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    # Upcoming versions of React Native may rely on get_default_flags(), but
    # we make it explicit here to aid in the React Native upgrade process.
    :hermes_enabled => true,
    :fabric_enabled => flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => FlipperConfiguration.disabled,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  pre_install do |installer|
    $RNMBGL.pre_install(installer)
    Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}
    $static_framework = ['react-native-ultimate-config', 'react-native-blur', 'react-native-webview',
    'RNSVG', 'BVLinearGradient', 'RNCMaskedView', 'RNPermissions']

    installer.pod_targets.each do |pod|
      if $static_framework.include?(pod.name) || pod.name.start_with?('Permission-')
        def pod.build_type
          Pod::BuildType.static_library
        end
      end
    end
  end

  post_install do |installer|
    installer.pods_project.build_configurations.each do |config|
      config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
    end
    $RNMBGL.post_install(installer)
    react_native_post_install(
      installer,
      # Set `mac_catalyst_enabled` to `true` in order to apply patches
      # necessary for Mac Catalyst builds
      :mac_catalyst_enabled => false
    )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings.delete 'IPHONEOS_DEPLOYMENT_TARGET'
        config.build_settings.delete 'ARCHS'
      end
    end
  end
end
