diff --git a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java
index f97ec71..1abcd98 100644
--- a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java
+++ b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewManager.java
@@ -51,7 +51,11 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
             requestManager = Glide.with(reactContext);
         }
 
-        return new FastImageViewWithUrl(reactContext);
+        FastImageViewWithUrl view = new FastImageViewWithUrl(reactContext);
+
+        view.setRequestManager(requestManager);
+
+        return view;
     }
 
     @ReactProp(name = "source")
@@ -74,8 +78,9 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
         final FastImageSource imageSource = FastImageViewConverter.getImageSource(view.getContext(), source);
         final GlideUrl glideUrl = imageSource.getGlideUrl();
 
-        // Cancel existing request.
         view.glideUrl = glideUrl;
+
+        // Cancel existing request.
         if (requestManager != null) {
             requestManager.clear(view);
         }
@@ -94,20 +99,7 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
         RCTEventEmitter eventEmitter = context.getJSModule(RCTEventEmitter.class);
         int viewId = view.getId();
         eventEmitter.receiveEvent(viewId, REACT_ON_LOAD_START_EVENT, new WritableNativeMap());
-
-        if (requestManager != null) {
-            requestManager
-                    // This will make this work for remote and local images. e.g.
-                    //    - file:///
-                    //    - content://
-                    //    - res:/
-                    //    - android.resource://
-                    //    - data:image/png;base64
-                    .load(imageSource.getSourceForLoad())
-                    .apply(FastImageViewConverter.getOptions(context, imageSource, source))
-                    .listener(new FastImageRequestListener(key))
-                    .into(view);
-        }
+        view.setSource(source);
     }
 
     @ReactProp(name = "tintColor", customType = "Color")
@@ -127,11 +119,6 @@ class FastImageViewManager extends SimpleViewManager<FastImageViewWithUrl> imple
 
     @Override
     public void onDropViewInstance(FastImageViewWithUrl view) {
-        // This will cancel existing requests.
-        if (requestManager != null) {
-            requestManager.clear(view);
-        }
-
         if (view.glideUrl != null) {
             final String key = view.glideUrl.toString();
             FastImageOkHttpProgressGlideModule.forget(key);
diff --git a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java
index 0b74d92..870140f 100644
--- a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java
+++ b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewWithUrl.java
@@ -3,12 +3,61 @@ package com.dylanvann.fastimage;
 import android.content.Context;
 import android.widget.ImageView;
 
+import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.load.model.GlideUrl;
+import com.facebook.react.bridge.ReadableMap;
 
 class FastImageViewWithUrl extends ImageView {
     public GlideUrl glideUrl;
+    private RequestManager mRequestManager;
+    private ReadableMap mSource;
 
     public FastImageViewWithUrl(Context context) {
         super(context);
     }
+
+    public void setRequestManager(RequestManager requestManager) {
+        mRequestManager = requestManager;
+    }
+
+    public void setSource(ReadableMap source) {
+        if (mSource != source) {
+            mSource = source;
+            tryLoadImage();
+        }
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        // This will cancel existing requests.
+        if (mRequestManager != null) {
+            mRequestManager.clear(this);
+        }
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        tryLoadImage();
+    }
+
+    private void tryLoadImage() {
+        if (mRequestManager != null && mSource != null && glideUrl != null) {
+            String key = glideUrl.toStringUrl();
+            final FastImageSource imageSource = FastImageViewConverter.getImageSource(getContext(), mSource);
+
+            mRequestManager
+                    // This will make this work for remote and local images. e.g.
+                    //    - file:///
+                    //    - content://
+                    //    - res:/
+                    //    - android.resource://
+                    //    - data:image/png;base64
+                    .load(imageSource.getSourceForLoad())
+                    .apply(FastImageViewConverter.getOptions(getContext(), imageSource, mSource))
+                    .listener(new FastImageRequestListener(key))
+                    .into(this);
+        }
+    }
 }
\ No newline at end of file
